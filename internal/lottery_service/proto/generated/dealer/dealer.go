// Code generated by protoc-gen-go. DO NOT EDIT.
// 這是一個舊版 proto 定義的存根，在新 API 過渡過程中提供兼容性

package dealer

import (
	"context"
	"google.golang.org/protobuf/types/known/timestamppb"
)

// BallType 球類型枚舉
type BallType int32

const (
	BallType_BALL_TYPE_UNSPECIFIED BallType = 0
	BallType_BALL_TYPE_REGULAR     BallType = 1
	BallType_BALL_TYPE_EXTRA       BallType = 2
	BallType_BALL_TYPE_JACKPOT     BallType = 3
	BallType_BALL_TYPE_LUCKY       BallType = 4
)

// GameStage 遊戲階段枚舉
type GameStage int32

const (
	GameStage_GAME_STAGE_UNSPECIFIED                     GameStage = 0
	GameStage_GAME_STAGE_PREPARATION                     GameStage = 1
	GameStage_GAME_STAGE_NEW_ROUND                       GameStage = 2
	GameStage_GAME_STAGE_CARD_PURCHASE_OPEN              GameStage = 3
	GameStage_GAME_STAGE_CARD_PURCHASE_CLOSE             GameStage = 4
	GameStage_GAME_STAGE_DRAWING_START                   GameStage = 5
	GameStage_GAME_STAGE_DRAWING_CLOSE                   GameStage = 6
	GameStage_GAME_STAGE_EXTRA_BALL_PREPARE              GameStage = 7
	GameStage_GAME_STAGE_EXTRA_BALL_SIDE_SELECT_BETTING_START GameStage = 8
	GameStage_GAME_STAGE_EXTRA_BALL_SIDE_SELECT_BETTING_CLOSED GameStage = 9
	GameStage_GAME_STAGE_EXTRA_BALL_WAIT_CLAIM           GameStage = 10
	GameStage_GAME_STAGE_EXTRA_BALL_DRAWING_START        GameStage = 11
	GameStage_GAME_STAGE_EXTRA_BALL_DRAWING_CLOSE        GameStage = 12
	GameStage_GAME_STAGE_PAYOUT_SETTLEMENT               GameStage = 13
	GameStage_GAME_STAGE_JACKPOT_START                   GameStage = 14
	GameStage_GAME_STAGE_JACKPOT_DRAWING_START           GameStage = 15
	GameStage_GAME_STAGE_JACKPOT_DRAWING_CLOSED          GameStage = 16
	GameStage_GAME_STAGE_JACKPOT_SETTLEMENT              GameStage = 17
	GameStage_GAME_STAGE_DRAWING_LUCKY_BALLS_START       GameStage = 18
	GameStage_GAME_STAGE_DRAWING_LUCKY_BALLS_CLOSED      GameStage = 19
	GameStage_GAME_STAGE_GAME_OVER                       GameStage = 20
)

// String 返回階段名稱
func (x GameStage) String() string {
	switch x {
	case GameStage_GAME_STAGE_UNSPECIFIED:
		return "GAME_STAGE_UNSPECIFIED"
	case GameStage_GAME_STAGE_PREPARATION:
		return "GAME_STAGE_PREPARATION"
	case GameStage_GAME_STAGE_NEW_ROUND:
		return "GAME_STAGE_NEW_ROUND"
	// 添加其他階段的轉換
	default:
		return "UNKNOWN_STAGE"
	}
}

// ExtraBallSide 額外球邊枚舉
type ExtraBallSide int32

const (
	ExtraBallSide_EXTRA_BALL_SIDE_UNSPECIFIED ExtraBallSide = 0
	ExtraBallSide_EXTRA_BALL_SIDE_LEFT        ExtraBallSide = 1
	ExtraBallSide_EXTRA_BALL_SIDE_RIGHT       ExtraBallSide = 2
)

// GameEventType 遊戲事件類型枚舉
type GameEventType int32

const (
	GameEventType_GAME_EVENT_TYPE_UNSPECIFIED  GameEventType = 0
	GameEventType_GAME_EVENT_TYPE_HEARTBEAT    GameEventType = 1
	GameEventType_GAME_EVENT_TYPE_NOTIFICATION GameEventType = 2
)

// String 返回事件類型名稱
func (x GameEventType) String() string {
	switch x {
	case GameEventType_GAME_EVENT_TYPE_UNSPECIFIED:
		return "GAME_EVENT_TYPE_UNSPECIFIED"
	case GameEventType_GAME_EVENT_TYPE_HEARTBEAT:
		return "GAME_EVENT_TYPE_HEARTBEAT"
	case GameEventType_GAME_EVENT_TYPE_NOTIFICATION:
		return "GAME_EVENT_TYPE_NOTIFICATION"
	default:
		return "UNKNOWN_EVENT_TYPE"
	}
}

// Ball 球結構
type Ball struct {
	Number    int32
	Type      BallType
	IsLast    bool
	Timestamp *timestamppb.Timestamp
}

// GetNumber 獲取球號
func (x *Ball) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

// GetType 獲取球類型
func (x *Ball) GetType() BallType {
	if x != nil {
		return x.Type
	}
	return BallType_BALL_TYPE_UNSPECIFIED
}

// GetIsLast 是否是最後一顆球
func (x *Ball) GetIsLast() bool {
	if x != nil {
		return x.IsLast
	}
	return false
}

// GetTimestamp 獲取時間戳
func (x *Ball) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// GameStatus 遊戲狀態
type GameStatus struct {
	Stage   GameStage
	Message string
}

// GetStage 獲取階段
func (x *GameStatus) GetStage() GameStage {
	if x != nil {
		return x.Stage
	}
	return GameStage_GAME_STAGE_UNSPECIFIED
}

// GetMessage 獲取消息
func (x *GameStatus) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// GameData 遊戲數據
type GameData struct {
	GameId        string
	CurrentStage  GameStage
	SelectedSide  ExtraBallSide
	RegularBalls  []*Ball
	ExtraBalls    []*Ball
	JackpotBalls  []*Ball
	LuckyBalls    []*Ball
	ExtraBallCount int32
	HasJackpot    bool
	StartTime     *timestamppb.Timestamp
	EndTime       *timestamppb.Timestamp
	CancelTime    *timestamppb.Timestamp
	LastUpdateTime *timestamppb.Timestamp
}

// 基本的 Getter 方法
func (x *GameData) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *GameData) GetCurrentStage() GameStage {
	if x != nil {
		return x.CurrentStage
	}
	return GameStage_GAME_STAGE_UNSPECIFIED
}

func (x *GameData) GetSelectedSide() ExtraBallSide {
	if x != nil {
		return x.SelectedSide
	}
	return ExtraBallSide_EXTRA_BALL_SIDE_UNSPECIFIED
}

func (x *GameData) GetRegularBalls() []*Ball {
	if x != nil {
		return x.RegularBalls
	}
	return nil
}

func (x *GameData) GetExtraBalls() []*Ball {
	if x != nil {
		return x.ExtraBalls
	}
	return nil
}

func (x *GameData) GetJackpotBalls() []*Ball {
	if x != nil {
		return x.JackpotBalls
	}
	return nil
}

func (x *GameData) GetLuckyBalls() []*Ball {
	if x != nil {
		return x.LuckyBalls
	}
	return nil
}

func (x *GameData) GetExtraBallCount() int32 {
	if x != nil {
		return x.ExtraBallCount
	}
	return 0
}

func (x *GameData) GetHasJackpot() bool {
	if x != nil {
		return x.HasJackpot
	}
	return false
}

func (x *GameData) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *GameData) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *GameData) GetCancelTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CancelTime
	}
	return nil
}

func (x *GameData) GetLastUpdateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastUpdateTime
	}
	return nil
}

// 請求與響應類型定義
// StartNewRound
type StartNewRoundRequest struct {
	RoomId string
}

func (x *StartNewRoundRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type StartNewRoundResponse struct {
	GameId       string
	StartTime    *timestamppb.Timestamp
	CurrentStage GameStage
}

func (x *StartNewRoundResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

// DrawBall
type DrawBallRequest struct {
	RoomId string
	Balls  []*Ball
}

func (x *DrawBallRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *DrawBallRequest) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

type DrawBallResponse struct {
	Balls      []*Ball
	GameStatus *GameStatus
}

func (x *DrawBallResponse) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

// DrawExtraBall
type DrawExtraBallRequest struct {
	RoomId string
	Balls  []*Ball
}

func (x *DrawExtraBallRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *DrawExtraBallRequest) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

type DrawExtraBallResponse struct {
	Balls []*Ball
}

func (x *DrawExtraBallResponse) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

// DrawJackpotBall
type DrawJackpotBallRequest struct {
	RoomId string
	Balls  []*Ball
}

func (x *DrawJackpotBallRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *DrawJackpotBallRequest) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

type DrawJackpotBallResponse struct {
	Balls []*Ball
}

func (x *DrawJackpotBallResponse) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

// DrawLuckyBall
type DrawLuckyBallRequest struct {
	RoomId string
	Balls  []*Ball
}

func (x *DrawLuckyBallRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

func (x *DrawLuckyBallRequest) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

type DrawLuckyBallResponse struct {
	Balls []*Ball
}

func (x *DrawLuckyBallResponse) GetBalls() []*Ball {
	if x != nil {
		return x.Balls
	}
	return nil
}

// CancelGame
type CancelGameRequest struct {
	RoomId string
	Reason string
}

func (x *CancelGameRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

// GetGameStatus
type GetGameStatusRequest struct {
	RoomId string
}

func (x *GetGameStatusRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type GetGameStatusResponse struct {
	GameData *GameData
}

func (x *GetGameStatusResponse) GetGameData() *GameData {
	if x != nil {
		return x.GameData
	}
	return nil
}

// StartJackpotRound
type StartJackpotRoundRequest struct {
	RoomId string
}

func (x *StartJackpotRoundRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

type StartJackpotRoundResponse struct {
	GameId       string
	StartTime    *timestamppb.Timestamp
	CurrentStage GameStage
	Success      bool
	OldStage     GameStage
	NewStage     GameStage
}

func (x *StartJackpotRoundResponse) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *StartJackpotRoundResponse) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *StartJackpotRoundResponse) GetCurrentStage() GameStage {
	if x != nil {
		return x.CurrentStage
	}
	return GameStage_GAME_STAGE_UNSPECIFIED
}

func (x *StartJackpotRoundResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *StartJackpotRoundResponse) GetOldStage() GameStage {
	if x != nil {
		return x.OldStage
	}
	return GameStage_GAME_STAGE_UNSPECIFIED
}

func (x *StartJackpotRoundResponse) GetNewStage() GameStage {
	if x != nil {
		return x.NewStage
	}
	return GameStage_GAME_STAGE_UNSPECIFIED
}

// 事件相關類型
type GameEvent_Heartbeat struct {
	Heartbeat *HeartbeatEvent
}

type GameEvent_Notification struct {
	Notification *NotificationEvent
}

type GameEvent_StageChanged struct {
	StageChanged *StageChangedEvent
}

type GameEvent_BallDrawn struct {
	BallDrawn *BallDrawnEvent
}

type GameEvent_GameCreated struct {
	GameCreated *GameCreatedEvent
}

type GameEvent_GameCancelled struct {
	GameCancelled *GameCancelledEvent
}

type GameEvent_GameCompleted struct {
	GameCompleted *GameCompletedEvent
}

type GameEvent_ExtraBallSideSelected struct {
	ExtraBallSideSelected *ExtraBallSideSelectedEvent
}

// HeartbeatEvent 心跳事件
type HeartbeatEvent struct {
	Message string
}

// NotificationEvent 通知事件
type NotificationEvent struct {
	GameData *GameData
	Message  string
}

// StageChangedEvent 階段變更事件
type StageChangedEvent struct {
	OldStage GameStage
	NewStage GameStage
}

// BallDrawnEvent 球抽取事件
type BallDrawnEvent struct {
	Ball *Ball
}

// GameCreatedEvent 遊戲創建事件
type GameCreatedEvent struct {
	InitialState *GameData
}

// GameCancelledEvent 遊戲取消事件
type GameCancelledEvent struct {
	Reason    string
	CancelTime *timestamppb.Timestamp
}

// GameCompletedEvent 遊戲完成事件
type GameCompletedEvent struct {
	FinalState *GameData
}

// ExtraBallSideSelectedEvent 額外球選邊事件
type ExtraBallSideSelectedEvent struct {
	SelectedSide ExtraBallSide
}

// GameEvent 遊戲事件
type GameEvent struct {
	EventType  GameEventType
	Type       GameEventType
	Timestamp  *timestamppb.Timestamp
	GameId     string
	EventData  interface{}
}

// GetType 獲取事件類型
func (x *GameEvent) GetType() GameEventType {
	if x != nil {
		return x.Type
	}
	return GameEventType_GAME_EVENT_TYPE_UNSPECIFIED
}

// GetEventType 獲取事件類型
func (x *GameEvent) GetEventType() GameEventType {
	if x != nil {
		return x.EventType
	}
	return GameEventType_GAME_EVENT_TYPE_UNSPECIFIED
}

// GetTimestamp 獲取時間戳
func (x *GameEvent) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

// GetGameId 獲取遊戲ID
func (x *GameEvent) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

// SubscribeGameEvents
type SubscribeGameEventsRequest struct {
	RoomId string
}

func (x *SubscribeGameEventsRequest) GetRoomId() string {
	if x != nil {
		return x.RoomId
	}
	return ""
}

// 服務端流接口
type DealerService_SubscribeGameEventsServer interface {
	Send(*GameEvent) error
	Context() context.Context
}

// 服務定義
type DealerService interface {
	StartNewRound(context.Context, *StartNewRoundRequest) (*StartNewRoundResponse, error)
	DrawBall(context.Context, *DrawBallRequest) (*DrawBallResponse, error)
	DrawExtraBall(context.Context, *DrawExtraBallRequest) (*DrawExtraBallResponse, error)
	DrawJackpotBall(context.Context, *DrawJackpotBallRequest) (*DrawJackpotBallResponse, error)
	DrawLuckyBall(context.Context, *DrawLuckyBallRequest) (*DrawLuckyBallResponse, error)
	CancelGame(context.Context, *CancelGameRequest) (*GameData, error)
	GetGameStatus(context.Context, *GetGameStatusRequest) (*GetGameStatusResponse, error)
	StartJackpotRound(context.Context, *StartJackpotRoundRequest) (*StartJackpotRoundResponse, error)
	SubscribeGameEvents(*SubscribeGameEventsRequest, DealerService_SubscribeGameEventsServer) error
}

// UnimplementedDealerServiceServer 未實現服務的基類
type UnimplementedDealerServiceServer struct{}

func (s *UnimplementedDealerServiceServer) StartNewRound(context.Context, *StartNewRoundRequest) (*StartNewRoundResponse, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) DrawBall(context.Context, *DrawBallRequest) (*DrawBallResponse, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) DrawExtraBall(context.Context, *DrawExtraBallRequest) (*DrawExtraBallResponse, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) DrawJackpotBall(context.Context, *DrawJackpotBallRequest) (*DrawJackpotBallResponse, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) DrawLuckyBall(context.Context, *DrawLuckyBallRequest) (*DrawLuckyBallResponse, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) CancelGame(context.Context, *CancelGameRequest) (*GameData, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) GetGameStatus(context.Context, *GetGameStatusRequest) (*GetGameStatusResponse, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) StartJackpotRound(context.Context, *StartJackpotRoundRequest) (*StartJackpotRoundResponse, error) {
	return nil, nil
}

func (s *UnimplementedDealerServiceServer) SubscribeGameEvents(*SubscribeGameEventsRequest, DealerService_SubscribeGameEventsServer) error {
	return nil
}

// DealerServiceClient 是客戶端接口
type DealerServiceClient interface {
	StartNewRound(ctx context.Context, in *StartNewRoundRequest, opts ...interface{}) (*StartNewRoundResponse, error)
	DrawBall(ctx context.Context, in *DrawBallRequest, opts ...interface{}) (*DrawBallResponse, error)
	DrawExtraBall(ctx context.Context, in *DrawExtraBallRequest, opts ...interface{}) (*DrawExtraBallResponse, error)
	DrawJackpotBall(ctx context.Context, in *DrawJackpotBallRequest, opts ...interface{}) (*DrawJackpotBallResponse, error)
	DrawLuckyBall(ctx context.Context, in *DrawLuckyBallRequest, opts ...interface{}) (*DrawLuckyBallResponse, error)
	CancelGame(ctx context.Context, in *CancelGameRequest, opts ...interface{}) (*GameData, error)
	GetGameStatus(ctx context.Context, in *GetGameStatusRequest, opts ...interface{}) (*GetGameStatusResponse, error)
	StartJackpotRound(ctx context.Context, in *StartJackpotRoundRequest, opts ...interface{}) (*StartJackpotRoundResponse, error)
	SubscribeGameEvents(ctx context.Context, in *SubscribeGameEventsRequest, opts ...interface{}) (interface{}, error)
}

// RegisterDealerServiceServer 注册服務
func RegisterDealerServiceServer(s interface{}, srv DealerService) {
	// 這只是一個存根實現
} 