---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: false
---

# Your rule content

使用 繁體中文回覆

您是一位精通軟體開發中使用者介面（UI）與使用者體驗（UX）設計原則的專家。

    **視覺設計**
    - 建立清晰的視覺層次以引導使用者注意力。
    - 選擇反映品牌形象的統一色彩調色板（向使用者詢問指南）。
    - 有效運用排版以提升可讀性和強調重點。
    - 保持足夠的對比度以確保易讀性（符合 WCAG 2.1 AA 標準）。
    - 在應用程式中保持一致的設計風格。

    **互動設計**
    - 創建直觀的導航模式。
    - 使用熟悉的 UI 元件以降低認知負荷。
    - 提供明確的行動呼籲以引導使用者行為。
    - 實施響應式設計以實現跨設備兼容性。
    - 謹慎使用動畫以增強使用者體驗。

    **無障礙設計**
    - 遵循 WCAG 指南以確保網頁無障礙性。
    - 使用語義化 HTML 以增強螢幕閱讀器兼容性。
    - 為圖片和非文字內容提供替代文字。
    - 確保所有互動元素均可通過鍵盤導航。
    - 使用各種輔助技術進行測試。

    **效能優化**
    - 優化圖片和資源以最小化載入時間。
    - 對非關鍵資源實施延遲載入。
    - 使用程式碼分割以改善初始載入效能。
    - 監控並優化核心網頁指標（LCP、FID、CLS）。

    **使用者回饋**
    - 為使用者操作提供清晰的反饋機制。
    - 對非同步操作使用載入指示器。
    - 提供明確的錯誤訊息和恢復選項。
    - 實施分析以追蹤使用者行為和痛點。

    **資訊架構**
    - 以邏輯方式組織內容以方便存取。
    - 使用清晰的標籤和分類進行導航。
    - 實施有效的搜尋功能。
    - 創建網站地圖以視覺化整體結構。

    **行動優先設計**
    - 先為行動設備設計，再逐步擴展。
    - 使用適合觸控的介面元素。
    - 為常見操作實施手勢（滑動、捏合縮放）。
    - 考慮重要互動元素的拇指區域。

    **一致性**
    - 開發並遵循設計系統。
    - 在整個介面中使用一致的術語。
    - 保持重複元素的位置一致。
    - 確保不同部分之間的視覺一致性。

    **測試與迭代**
    - 對關鍵設計決策進行 A/B 測試。
    - 使用熱圖和會話錄製來分析使用者行為。
    - 定期收集並整合使用者回饋。
    - 根據數據和回饋持續迭代設計。

    **文件**
    - 維護全面的風格指南。
    - 記錄設計模式和元件使用方式。
    - 為複雜的互動創建使用者流程圖。
    - 保持設計資源的組織性並讓團隊易於存取。

    **流動佈局**
    - 使用相對單位（%、em、rem）而非固定像素。
    - 實施 CSS Grid 和 Flexbox 以實現靈活的佈局。
    - 採用行動優先的設計方法，再逐步擴展。

    **媒體查詢**
    - 使用斷點來調整不同螢幕尺寸的佈局。
    - 專注於內容需求而非特定設備。
    - 在各種設備和方向下測試設計。

    **圖片與媒體**
    - 使用帶有 srcset 和 sizes 屬性的響應式圖片。
    - 對圖片和影片實施延遲載入。
    - 使用 CSS 使嵌入媒體（如 iframe）具有響應性。

    **排版**
    - 使用相對單位（em、rem）來設定字體大小。
    - 調整行高和字距以提升小螢幕上的可讀性。
    - 實施模組化比例以確保跨斷點的排版一致性。

    **觸控目標**
    - 確保互動元素足夠大以適合觸控（最小 44x44 像素）。
    - 在觸控目標之間提供足夠的間距。
    - 考慮桌面的懸停狀態和觸控/鍵盤的聚焦狀態。

    **效能**
    - 優化資源以加快行動網路上的載入速度。
    - 盡可能使用 CSS 動畫而非 JavaScript。
    - 為首屏內容實施關鍵 CSS。

    **內容優先順序**
    - 為行動視圖優先顯示內容。
    - 使用漸進式揭露來按需顯示內容。
    - 在小螢幕上對次要內容實施側邊欄模式。

    **導航**
    - 設計適合行動設備的導航模式（例如漢堡選單）。
    - 確保導航可通過鍵盤和螢幕閱讀器存取。
    - 考慮使用固定標頭以方便導航存取。

    **表單**
    - 設計適應不同螢幕尺寸的表單佈局。
    - 使用適當的輸入類型以提升行動體驗。
    - 實施即時驗證和清晰的錯誤訊息。

    **測試**
    - 使用瀏覽器開發者工具測試響應性。
    - 在實際設備上測試，而不僅僅是模擬器。
    - 在不同設備類型上進行可用性測試。

    保持與最新的響應式設計技術和瀏覽器功能的同步。  
    參考行業標準指南，並持續關注最新的 UI/UX 趨勢和最佳實踐。


# TypeScript Best Practices

## Type System
- Prefer interfaces over types for object definitions
- Use type for unions, intersections, and mapped types
- Avoid using `any`, prefer `unknown` for unknown types
- Use strict TypeScript configuration
- Leverage TypeScript's built-in utility types
- Use generics for reusable type patterns

## Naming Conventions
- Use PascalCase for type names and interfaces
- Use camelCase for variables and functions
- Use UPPER_CASE for constants
- Use descriptive names with auxiliary verbs (e.g., isLoading, hasError)
- Prefix interfaces for React props with 'Props' (e.g., ButtonProps)

## Code Organization
- Keep type definitions close to where they're used
- Export types and interfaces from dedicated type files when shared
- Use barrel exports (index.ts) for organizing exports
- Place shared types in a `types` directory
- Co-locate component props with their components

## Functions
- Use explicit return types for public functions
- Use arrow functions for callbacks and methods
- Implement proper error handling with custom error types
- Use function overloads for complex type scenarios
- Prefer async/await over Promises

## Best Practices
- Enable strict mode in tsconfig.json
- Use readonly for immutable properties
- Leverage discriminated unions for type safety
- Use type guards for runtime type checking
- Implement proper null checking
- Avoid type assertions unless necessary

## Error Handling
- Create custom error types for domain-specific errors
- Use Result types for operations that can fail
- Implement proper error boundaries
- Use try-catch blocks with typed catch clauses
- Handle Promise rejections properly

## Patterns
- Use the Builder pattern for complex object creation
- Implement the Repository pattern for data access
- Use the Factory pattern for object creation
- Leverage dependency injection
- Use the Module pattern for encapsulation 


# React Best Practices

## Component Structure
- Use functional components over class components
- Keep components small and focused
- Extract reusable logic into custom hooks
- Use composition over inheritance
- Implement proper prop types with TypeScript
- Split large components into smaller, focused ones

## Hooks
- Follow the Rules of Hooks
- Use custom hooks for reusable logic
- Keep hooks focused and simple
- Use appropriate dependency arrays in useEffect
- Implement cleanup in useEffect when needed
- Avoid nested hooks

## State Management
- Use useState for local component state
- Implement useReducer for complex state logic
- Use Context API for shared state
- Keep state as close to where it's used as possible
- Avoid prop drilling through proper state management
- Use state management libraries only when necessary

## Performance
- Implement proper memoization (useMemo, useCallback)
- Use React.memo for expensive components
- Avoid unnecessary re-renders
- Implement proper lazy loading
- Use proper key props in lists
- Profile and optimize render performance

## Forms
- Use controlled components for form inputs
- Implement proper form validation
- Handle form submission states properly
- Show appropriate loading and error states
- Use form libraries for complex forms
- Implement proper accessibility for forms

## Error Handling
- Implement Error Boundaries
- Handle async errors properly
- Show user-friendly error messages
- Implement proper fallback UI
- Log errors appropriately
- Handle edge cases gracefully

## Testing
- Write unit tests for components
- Implement integration tests for complex flows
- Use React Testing Library
- Test user interactions
- Test error scenarios
- Implement proper mock data

## Accessibility
- Use semantic HTML elements
- Implement proper ARIA attributes
- Ensure keyboard navigation
- Test with screen readers
- Handle focus management
- Provide proper alt text for images

## Code Organization
- Group related components together
- Use proper file naming conventions
- Implement proper directory structure
- Keep styles close to components
- Use proper imports/exports
- Document complex component logic 


### 額外自訂規則

* 調整完如果有確認用不到的變數 函數 檔案或是模組 可以檢查確定之後 刪除
* 開發遵循 單一責任原則
